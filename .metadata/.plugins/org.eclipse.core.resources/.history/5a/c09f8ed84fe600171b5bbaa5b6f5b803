package com.bridgelabz.User.DAO;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.query.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.bridgelabz.User.model.User;

@Repository
public class UserDaoImplemention implements UserDao {

	@Autowired
	SessionFactory sessionFactory;

	public int registration(User user) {
		
		Session session = sessionFactory.getCurrentSession();
		Query<?> query = session.createQuery("from User where email =:email or mobileNumber = :phone");
		query.setParameter("email", user.getEmail());
		query.setParameter("phone", user.getMobileNumber());
		List<?> list = query.list();
		if (list != null) {
			session.save(user);
			
			return 1;
			
		} else {
			
			return 0;
		}
	}

	public User login(User user) {
		Session session = sessionFactory.getCurrentSession();

		Query<?> query = session
				.createQuery("from User where email =:email and password =:password");
		query.setParameter("email", user.getEmail());
		query.setParameter("password", user.getPassword());
		User name =  (User) query.uniqueResult();

		if (name != null) {
			return name;
		}
		return null;
	}

	@SuppressWarnings("rawtypes")
	public User getUserByEmail(String email) {
		
		Session session = sessionFactory.getCurrentSession();

		Query query = session.createQuery("from User where email =:email");
		query.setParameter("email", email);
		User result =  (User) query.uniqueResult();
		if (result != null) {
			System.out.println("UserObJect "+result);
			return result;
		} 
		System.out.println("UserObJect "+result);

		return null;
	}

	public User getUserById(int id) {
		Session session = sessionFactory.getCurrentSession();
		User user = session.get(User.class, id);
		return user;
	}

	public boolean updateActivation(int id) {
		System.out.println("id:" + id);
		System.out.println("id found");
		Session session = sessionFactory.getCurrentSession();

		Query<?> query = session.createQuery("update User set activated =:activated where id=:id ");
		query.setParameter("id", id);
		query.setParameter("activated", true);
		int i = query.executeUpdate();

		if (i > 0)
			return true;
		else
			return false;
	}
	@Override
	public void updateUser(User oldUser) {
		Session session = sessionFactory.getCurrentSession();
		System.out.println(oldUser);
		session.saveOrUpdate(oldUser);
		System.out.println(oldUser);
	}
	@Override
	public int addLabel(Label label) {
			
			int labelId=0;
			Session session=sessionFactory.openSession();
			Transaction transaction=session.beginTransaction();
			try{
			labelId=(Integer) session.save(label);
			transaction.commit();
			}catch(HibernateException e){
				e.printStackTrace();
				transaction.rollback();
			}finally{
				session.close();
			}
			return labelId;
		}
		
		public boolean updateLable(Label label) {
			
			boolean status=false;
			Session session=sessionFactory.openSession();
			Transaction transaction=session.beginTransaction();
			try{
				System.out.println("in update label");
				Label completlabel=	session.get(Label.class, label.getId());
				completlabel.setLabelName(label.getLabelName());
			 session.update(completlabel);
			 transaction.commit();
			 status=true;
			}catch(HibernateException e){
				System.out.println("Label not updated");
				e.printStackTrace();
				transaction.rollback();
			}finally{
				session.close();
			}
			return status;
		}
		
	    public boolean deleteLable(Label label) {
			
			boolean status=false;
			Session session=sessionFactory.openSession();
			Transaction transaction=session.beginTransaction();
			try{
			Label completlabel=	session.get(Label.class, label.getId());
			 session.delete(completlabel);
			 transaction.commit();
			 status=true;
			}catch(HibernateException e){
				e.printStackTrace();
				transaction.rollback();
			}finally{
				session.close();
			}
			return status;
		}

		public Set<Label> getAllLabels(int userId) {
			Session session=sessionFactory.openSession();
			UserDetails user=session.get(UserDetails.class,userId);
			Set<Label> label=user.getLabels();
			System.out.println(label);
			session.close();
			return label;
		}
		

		@Override
		public List<User> getUserList() {
		
	  
	        List<User> userEmailList=.list();
	        System.out.println("USER Email List");
	        System.out.println(userEmailList);
			return userEmailList;
		}
		
		

	
}
