package com.bridgelabz.User.Controller;

import java.sql.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import com.bridgelabz.User.Service.NoteServices;
import com.bridgelabz.User.Utility.Token;
import com.bridgelabz.User.model.CustomeResponse;
import com.bridgelabz.User.model.Note;

@RestController
public class NoteController {

	@Autowired
	private NoteServices noteService;

	@RequestMapping(value = "/user/addNote", method = RequestMethod.POST)
	public ResponseEntity<CustomeResponse> addNote(@RequestBody Note note, HttpServletRequest request) {

		CustomeResponse myResponse = new CustomeResponse();

		try {

			Date date = new Date(System.currentTimeMillis());
			note.setCreatedDate(date);
			note.setModifiedDate(date);
			String token = request.getHeader("accssToken");
			int id = Token.verify(token);
			noteService.addNote(note, id);

			myResponse.setMessage("Note is added");
			myResponse.setStatus(1);
			return new ResponseEntity<CustomeResponse>(myResponse, HttpStatus.OK);

		} catch (Exception e) {

			myResponse.setMessage("Note is Not added");
			myResponse.setStatus(-1);
			return new ResponseEntity<CustomeResponse>(myResponse, HttpStatus.BAD_REQUEST);
		}
	}

	@RequestMapping(value = "/user/deleteNote/{noteId}", method = RequestMethod.DELETE)
	public ResponseEntity<CustomeResponse> deleteNote(@PathVariable("noteId") int noteId) {

		CustomeResponse myResponse = new CustomeResponse();

		try {
			noteService.deleteNote(noteId);
			myResponse.setMessage("Note is deleted");
			myResponse.setStatus(1);
			return new ResponseEntity<CustomeResponse>(myResponse, HttpStatus.OK);
		}

		catch (Exception e) {
			e.printStackTrace();
			myResponse.setMessage("Note is Notdeleted");
			myResponse.setStatus(-1);
			return new ResponseEntity<CustomeResponse>(myResponse, HttpStatus.BAD_REQUEST);
		}
	}

	@RequestMapping(value = "/user/update", method = RequestMethod.POST)
	public ResponseEntity<CustomeResponse> updateNote(@RequestBody Note note) {
		CustomeResponse myResponse = new CustomeResponse();

		try {
			noteService.updateNote(note);
			myResponse.setMessage("Note is updated");
			myResponse.setStatus(1);
			return new ResponseEntity<CustomeResponse>(myResponse, HttpStatus.OK);

		} catch (Exception e) {

			e.printStackTrace();
			myResponse.setMessage("Note is not Updated");
			myResponse.setStatus(-1);
			return new ResponseEntity<CustomeResponse>(myResponse, HttpStatus.BAD_REQUEST);
		}
	}

	@RequestMapping(value = "/user/getAllNotes", method = RequestMethod.GET)
	public ResponseEntity<CustomeResponse> getAllNotes() {

		CustomeResponse myResponse = new CustomeResponse();
		List<Note> allNotes = null;
		try {
			allNotes = noteService.getallNotes();
			System.out.println(allNotes);
			myResponse.setMessage("Got all the notes");
			myResponse.setStatus(1);
			return new ResponseEntity<CustomeResponse>(myResponse, HttpStatus.OK);
		} catch (Exception e) {

			e.printStackTrace();
			myResponse.setMessage("Didn't got the notes ");
			myResponse.setStatus(-1);
			return new ResponseEntity<CustomeResponse>(myResponse, HttpStatus.BAD_REQUEST);
		}
	}

	@RequestMapping(value = "/isArchive/{noteId", method = RequestMethod.PUT)
	public ResponseEntity<CustomeResponse> updateArchive(@RequestBody Note note, @PathVariable("noteId") int noteId) {
		CustomeResponse myResponse = new CustomeResponse();
		try {
			noteService.updateArchive(noteId);
			myResponse.setMessage("Archive is updated");
			myResponse.setStatus(1);
			return new ResponseEntity<CustomeResponse>(myResponse, HttpStatus.OK);

		} catch (Exception e) {

			e.printStackTrace();
			myResponse.setMessage("Archive is not Updated");
			myResponse.setStatus(-1);
			return new ResponseEntity<CustomeResponse>(myResponse, HttpStatus.BAD_REQUEST);
		}
	}

	@RequestMapping(value = "/emptyTrash/{userId", method = RequestMethod.PUT)
	public ResponseEntity<CustomeResponse> updateEmptyTrash(@RequestBody Note note,
			@PathVariable("userId") int userId) {
		CustomeResponse myResponse = new CustomeResponse();

		try {

			noteService.updateEmptyTrash(userId);
			myResponse.setMessage("Trash is Not Empty...");
			myResponse.setStatus(1);
			return new ResponseEntity<CustomeResponse>(myResponse, HttpStatus.OK);

		} catch (Exception e) {

			e.printStackTrace();
			myResponse.setMessage("Trash is Empty");
			myResponse.setStatus(-1);
			return new ResponseEntity<CustomeResponse>(myResponse, HttpStatus.BAD_REQUEST);
		}
	}

	@RequestMapping(value = "/isPin/{noteId", method = RequestMethod.POST)
	public ResponseEntity<CustomeResponse> updatePin(@RequestBody Note note, @PathVariable("noteId") int noteId) {
		CustomeResponse myResponse = new CustomeResponse();

		try {

			noteService.updatePin(noteId);
			myResponse.setMessage("Pin Updated");
			myResponse.setStatus(1);
			return new ResponseEntity<CustomeResponse>(myResponse, HttpStatus.OK);

		} catch (Exception e) {

			e.printStackTrace();
			myResponse.setMessage("Pin is not Updated");
			myResponse.setStatus(-1);
			return new ResponseEntity<CustomeResponse>(myResponse, HttpStatus.BAD_REQUEST);
		}
	}
}
