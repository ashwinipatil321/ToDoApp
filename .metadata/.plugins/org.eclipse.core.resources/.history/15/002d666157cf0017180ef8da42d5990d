package com.bridgelabz.User.Controller;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.bridgelabz.User.Service.UserService;
import com.bridgelabz.User.Utility.Validation;
import com.bridgelabz.User.model.User;


@RestController
public class UserController
{
	@Autowired
	UserService userService;

	@RequestMapping(value = "/register", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<String> registrationUser(@RequestBody User user,HttpServletRequest request) {
		HttpSession session=request.getSession();
		if (user.getEmail() != null && user.getUserFirstName() != null &&  user.getUserFirstName() != null && user.getMobileNumber() != null
				&& user.getPassword() != null) {
			boolean valid = Validation.isvalidation(user,session);
			if (!valid) {
				int i = userService.createUser(user);
				if(i>0)
				return new	ResponseEntity<String>("Register Sucessfully...",HttpStatus.OK);
				else return new	ResponseEntity<String>("EmailId and password Aready Existe...",HttpStatus.BAD_REQUEST); 
			}
		}
		return new ResponseEntity<String>("Invalid",HttpStatus.CONFLICT);
	}

	/*@RequestMapping(value = "/login", method = RequestMethod.POST)
	public ResponseEntity<S> loginUser(@RequestBody User user, HttpServletRequest request,
			HttpSession session, HttpServletResponse response) {
		String email = user.getEmail();
		String password = user.getPassword();
		String error2 = Validation.checkemail(email);
		String error4 = Validation.checkpassword(password);
		if (error2 == "valid" && error4 == "valid") {
			String passwordEncrypt = MD5Encryption.encrypt(password);
			user.setPassword(passwordEncrypt);

			user = userService.loginUser(user);

			User user1=userService.getUserByEmail(email);
			System.out.println("dDSSD::"+user1);

			if(user1!=null)
			{
				System.out.println(user1.getActivated());
				if (user1.getActivated() > 0) {
					System.out.println("HERE:" + user1 + "\n ACTIVATED::" + user1.getActivated());
					//			session temperoty remove session use when token remove and invalidate done scussfully
					session = request.getSession();
					session.setAttribute(session.getId(), user);
					session.setAttribute("user", user);
					//token generate
					String token = Token.generateToken(email, user1.getUserID());
					response.setHeader("login", token);
					System.out.println(Token.verify(token));
					System.out.println("login successful!!!");
					return new ResponseEntity<Void>(HttpStatus.OK);
				}
				else{
					return new ResponseEntity<Void>(HttpStatus.BAD_REQUEST);
				}
			}
			else
				return new ResponseEntity<Void>(HttpStatus.BAD_REQUEST);	
		} else {
			System.out.println("Error in Input!!!");
			return new ResponseEntity<Void>(HttpStatus.CONFLICT);
		}*/
	}

