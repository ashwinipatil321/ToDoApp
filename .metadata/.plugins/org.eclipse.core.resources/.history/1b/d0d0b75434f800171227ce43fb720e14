var todoApp = angular.module('ToDo');

todoApp
.controller(
		'homeController',
		function($scope, toastr, $interval, homeService, $filter,
				$uibModal, loginService, $state, $http, $location,
				fileReader) {

			var allnotes = [];

/*-------------------------------colors added in notes------------------------------------------------*/

			$scope.AddNoteColor = "#ffffff";

			$scope.addNoteColorChange = function(color) {
				$scope.AddNoteColor = color;
				console.log(color);
			}

			$scope.colors = [

				{
					"color" : '#ffffff',
					"path" : 'images/white.png'
				}, {
					"color" : '#e74c3c',
					"path" : 'images/Red.png'
				}, {
					"color" : '#ff8c1a',
					"path" : 'images/orange.png'
				}, {
					"color" : '#fcff77',
					"path" : 'images/lightyellow.png'
				}, {
					"color" : '#80ff80',
					"path" : 'images/green.png'
				}, {
					"color" : '#99ffff',
					"path" : 'images/skyblue.png'
				}, {
					"color" : '#0099ff',
					"path" : 'images/blue.png'
				}, {
					"color" : '#9966ff',
					"path" : 'images/purple.png'
				}, {
					"color" : '#ff99cc',
					"path" : 'images/pink.png'
				}, {
					"color" : '#d9b38c',
					"path" : 'images/brown.png'
				}, {
					"color" : '#bfbfbf',
					"path" : 'images/grey.png'
				} ];

/*---------------------------------Gives color to topNavBar------------------------------------------------*/

			if ($state.current.name == "home") {

				$scope.topNavBarColor = "#ffbb33";

			} else if ($state.current.name == "archive") {

				$scope.topNavBarColor = "#669999";

			} else if ($state.current.name == "trash") {

				$scope.topNavBarColor = "#636363";
			} else if ($state.current.name == "reminder") {

				$scope.topNavBarColor = "#669999";

			} else if ($state.current.name == "searchbar") {

				$scope.topNavBarColor = "#3e50b4";
			} else {
				$scope.topNavBarColor = "#669999";
			}

/*-----------------------------------SideBar Taggle------------------------------------------------*/


			$scope.toggleSideBar = function() {

				var width = $('#sideToggle').width();
				console.log(width);
				if (width == '250') {
					document.getElementById("sideToggle").style.width = "0px";
					document.getElementById("content-wrapper").style.marginLeft = "270px";
				} else {
					document.getElementById("sideToggle").style.width = "250px";
					document.getElementById("content-wrapper").style.marginLeft = "450px";

				}
			}

/*-----------------------------------------Add Notes------------------------------------------------*/

			$scope.saveNote = function() {
				var message = homeService.service('POST',
						'user/saveNote', $scope.note);
				console.log("its coming here");
				console.log($scope.note);
				message.then(function(response) {
					$scope.note = {};

					getAllNotes();

				}, function(response) {

					getAllNotes();
					$scope.note = {};
					console.log("some thing happening");
				});
			}

	/*------------------------Get All Notes------------------------*/

			var getAllNotes = function() {

				var notes = homeService.getAllNotes();
				console.log("in this function");

				notes.then(function(response) {
					console.log("in coming here also");

					console.log(response.data);
					$scope.notes = response.data;
					allnotes = response.data;
					if($scope.ListViewToggle == true)
						{
						
						localStorage.setItem('ListViewToggle',true);
						}
					else
						{
						localStorage.setItem('ListViewToggle',$scope.ListView);
						}
					$scope.changeToDateObject($scope.notes);
				}, function(response) {

					$scope.error = response.data.message;
				});
			}
			$scope.newnote = false;

			$scope.show = function() {
				$scope.newnote = true;
			}
			$scope.hide = function() {
				$scope.newnote = false;
			}
			getAllNotes();
			
	/*------------------------get Author------------------------*/		

			var getAuthor = function(){
				$scope.author = homeService.getAuthor();
				if($scope.author==null){
					$location.path('login');
				}
			}
			getAuthor();
			
	/*------------------------Delete Notes------------------------*/

			$scope.deleteNotes = function(note) {
				console.log("note id" + note.noteId);
				var notes = homeService.deleteNotes(note);
				notes.then(function(response) {
					console.log("delete sucessfully....")

				}), function(response) {
					$scope.error = response.data.message;
				};
			}

	/*------------------------Update Notes---------------------------*/

			$scope.updateNotes = function(note) {
				console.log("inside update controller", note.noteId)
				console.log(note);
				var a = homeService.updateNotes(note);

				a.then(function(response) {

					getAllNotes();

				}, function(response) {
				});
			}


	/*-----------------------------Edit Note Modal---------------------------*/

			$scope.showModal = function(note) {

				$scope.note = note;

				modalInstance = $uibModal.open({

					templateUrl : 'htmlpages/showDialog.html',
					scope : $scope,
					size : 'md'
				});

			};

/*--------------------------------------List and Grid view of Notes------------------------------------------------*/

			$scope.ListView = localStorage.getItem('ListViewToggle');
			$scope.ListViewToggle = function() {
				var ListView = localStorage.getItem('ListViewToggle');

				if ($scope.ListView == true) {
					$scope.ListView = false;
					listGrideView();
				} else {
					$scope.ListView = true;
					listGrideView();
				}
			}

			listGrideView();

			function listGrideView() {
				if ($scope.ListView) {
					var element = document.getElementsByClassName('card');
					for (var i = 0; i < element.length; i++) {
						element[i].style.width = "900px";
					}
					localStorage.setItem('ListViewToggle',$scope.ListView);

				} else {
					var element = document
					.getElementsByClassName('card');
					for (var i = 0; i < element.length; i++) {
						element[i].style.width = "300px";
					}
					localStorage.setItem('ListViewToggle',$scope.ListView);

				}
			}
			
/*-------------------------------------Archive Notes-----------------------------------------------*/

			$scope.addToArchive = function(note) {
				note.archive = true;
				note.pin = false;
				var a = homeService.updateNotes(note);

				a.then(function(response) {
					getAllNotes();
				}, function(response) {
				});
			}

/*------------------------Unarchieve Notes------------------------*/

			$scope.unarchiveNote = function(note) {
				note.archive = false;
				note.pin = false;
				var a = homeService.updateNotes(note);
				a.then(function(response) {
					getAllNotes();
				}, function(response) {
				});
			}

	/*-----------------------------------Add Note in Trrash------------------------------------------------*/

			$scope.addToTrash = function(note) {

				note.archive = false;
				note.pin = false;
				note.emptyTrash = true;
				var a = homeService.updateNotes(note);

				a.then(function(response) {
					getAllNotes();
				}, function(response) {
				});
			}

/*-----------------------------------Restore note in notes------------------------------------------------*/

			$scope.restoreToNotes = function(note) {

				note.emptyTrash = false;
				console.log(note)
				var notes = homeService.updateNotes(note);
				notes.then(function(response) {

					getAllNotes();

				}, function(response) {

					console.log(response.data);
					getAllNotes();

					$scope.error = response.data;

				});
			}

/*-----------------------------------------pinned Notes-----------------------------------------------*/

			$scope.addTopin = function(note) {

				var notes;

				if (note.pin == false) {
					notes = homeService.addTopin(note.noteId, true);
				} else {
					notes = homeService.addTopin(note.noteId, false);
				}

				notes.then(function(response) {

					getAllNotes();

				});
			}


/*------------------------social share-----------------------------------------------*/

			$scope.fbShareInit = function(note) {

				FB.init({

					appId : '1347872695339978',
					status : true,
					cookie : true,
					xfbml : true,
					version : 'v2.4'
				});

				FB.ui({

					method : 'share_open_graph',

					action_type : 'og.likes',

					action_properties : JSON.stringify({

						object : {

							'og:title' : note.title,
							'og:description' : note.description
						}
					})
				}, function(response) {

					if (!response || response.error) {

						alert('Error while posting data');

					} else {

						alert('posting completed Successfully');
					}
				});
			};

/*------------------------Make a copy------------------------------------------------*/

			$scope.copy = function(note) {

				var notes = homeService.saveNotes(note);

				notes.then(function(response) {

					getAllNotes();

				}, function(response) {

				});
			}

			getUser();

/*---------------------------------------------get user-------------------------------------------------*/

			function getUser() {

				var a = homeService.getUser();
				a.then(function(response) {
					$scope.User = response.data;
					console.log(response.data);
				}, function(response) {
					
				});
			}

			
/*---------------------------Url sripping on notes--------------------------------------------------*/
			
			urls = [];
			
			$scope.checkUrlList = function(note) {
				console.log("checkUrlList")
				var urlPattern = /(http|ftp|https):\/\/[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?/gi;
				var url = note.description.match(urlPattern);
				var link = [];
				var j = 0;
				note.url = [];
				note.link = [];
				console.log(url);
				if (url != null || url != undefined) {
					for (var i = 0; i < url.length; i++) {
						console.log("url length");
						console.log(url.length);
						note.url[i] = url[i];
						saveLabel = homeService.getUrl(url[i]);
						saveLabel.then(function(response) {
							j++;
							if (note.size == undefined) {
								note.size = 0;
							}
							console.log(note.size);
							var responseData = response.data;
							link[note.size] = {
								title : responseData.title,
								url : note.url[note.size],
								imageUrl : responseData.imageUrl,
								domain : responseData.domain
							}
							note.link[note.size] = link[note.size];
							note.size = note.size + 1;
							console.log(note.link);
						}, function(response) {
						});
					}
				}
			}
/*-----------------------------------open list of labels-------------------------------------------------*/

			
			$scope.showLabelList = function() {
				getlabels();
				modalInstance = $uibModal.open({

					templateUrl : 'htmlpages/label-list.html',
					controller : 'homeController',
					scope : $scope,
					windowClass : 'app-modal-window',
				});

			};

	/*------------------------save labels----------------------------*/

			$scope.saveLabel = function(label) {

				var data = {};
				if (label == undefined) {
					data.labelName = $scope.newLabel;
				} else {
					data.labelName = label.labelName;
				}
				console.log("save label data " + label);
				var saveLabel = homeService.saveLabel(data);
				saveLabel.then(function(response) {
					getlabels();

				}, function(response) {
					if (response.status == '400')
						$location.path('/login')
				});
			}

	/*------------------------delete labels-------------------------*/

			$scope.deleteLabel = function(label) {

				homeService.deleteLabel(label);
				getlabels();
			}

	/*------------------------getAll Labels--------------------------*/

			var getlabels = function() {
				var httpGetLabels = homeService.getAllLabels();
				httpGetLabels.then(function(response) {
					$scope.labels = response.data;
					allLabels = response.data;
				}, function(response) {
					if (response.status == '400')
						$location.path('/login')
				});
			}
			getlabels();
			
	/*------------------------get Note By label Name-------------------*/

			$scope.getNoteByLabel = function(labelName) {

				$scope.allNotesByLabel = [];
				var index = 0;
				$scope.matchLabel = labelName;
				for (var i = 0; i < allnotes.length; i++) {
					if (allnotes[i].allLabels) {
						var allLabel = allnotes[i].allLabels;
						for (var j = 0; j < allLabel.length; j++) {
							if (allLabel[j].labelName == labelName) {
								$scope.allNotesByLabel[index++] = allnotes[i];

							}
						}
					}
				}
			}

	/*------------------------ show labels--------------------------------*/

			$scope.removeLabel = function(note, label) {
				$scope.note = note;
				var lenght;
				if (angular.isArray($scope.note.labels)) {
					for (var i = $scope.note.labels.length; i--;) {
						if (angular.equals($scope.note.labels[i], item)) {
							$scope.note.labels.splice(i, 1);
							break;
						}
					}
				}
				homeService.updateNotes(note);
			}

	/*------------------------ input checkbox for label--------------------*/

			$scope.checkboxCheck = function(note, label) {
				console.log("label name", label);
				for (var i = 0; i < note.allLabels.length; i++) {
					if (note.allLabels[i].labelName === label.labelName) {
						return true;
					}
				}
				return false;
			}

	/*------------------------ Add labels in notes-------------------------*/

			$scope.toggleLabelOfNote = function(note, label) {

				var index = -1;
				var i = 0;
				for (i = 0; i < note.allLabels.length; i++) {
					if (note.allLabels[i].labelName === label.labelName) {
						index = i;
						break;
					}
				}
				if (index == -1) {
					note.allLabels.push(label);
				} else {
					note.allLabels.splice(index, 1);
				}
				homeService.updateNotes(note);
			}

			/*------------------------  Edit labels-------------------------*/

			$scope.editLabel = function(label) {

				console.log("inside edit labels....");
				homeService.editLabel(label);
				getlabels();
			}

/*------------------------------------- open collaborator --------------------------------------------------*/

			$scope.openCollboarate = function(note, user, index) {

				$scope.note = note;
				$scope.user = user;
				$scope.indexOfNote = index;
				modalInstance = $uibModal.open({
					templateUrl : 'htmlpages/collaborator.html',
					scope : $scope,
					size : 'md'
				});
			}

	/*------------------------ show list of user in modal----------------*/

			$scope.getUserlist = function(note, user, index) {

				var obj = {};
				obj.noteId = note;
				obj.ownerId = user;
				obj.shareId = {};

				var userDetails = homeService.getUserlist(obj);
				userDetails.then(function(response) {

					console.log(response.data);
					$scope.users = response.data;
					note.collabratorUsers = response.data;

				}, function(response) {
					$scope.user = {};
				});
				console.log(user);
			}

	/*------------------------ get the owner  ---------------------------*/

			$scope.getOwner = function(note) {

				var user = homeService.getOwner(note);
				user.then(function(response) {
					$scope.owner = response.data;
				}, function(response) {
					$scope.users = {};
				});
			}

	/*----------------- collaborate the owner and share user------------*/

			$scope.collborate = function(note, user, index) {

				var obj = {};
				console.log(note);
				obj.noteId = note;
				obj.ownerId = user;
				obj.shareId = $scope.shareWith;
				var userDetails = homeService.collborate(obj);

				userDetails.then(function(response) {

					console.log(response.data);
					$scope.users = response.data;
					note.collabratorUsers = response.data;

				}, function(response) {
					$scope.user = {};

				});
				console.log(user);
			}

	/*------------------------ delete the collaborator------------*/

			$scope.removeCollborator = function(note, user, index) {

				var obj = {};
				obj.noteId = note;
				obj.ownerId = {
						'email' : ''
				};
				obj.shareId = user;
				var user = homeService.removeCollborator(obj);
				user.then(function(response) {
					$scope.collborate(note, $scope.owner);

					console.log(response.data);

				}, function(response) {
					console.log(response.data);

				});
			}

	/*------------------------hide collaborator modal---------*/

			$scope.cancelModel = function() {
				$("#myModal").hide();
			}

/*------------------------------------reminder interval function---------------------------------------------------*/

			var intervalFunction = function() {
				$interval(
						function() {
							notes = $scope.notes;
							for (var noteCount = 0; noteCount < notes.length; noteCount++) {
								if (notes[noteCount].reminderDate != 0
										&& notes[noteCount].reminderTime != "") {
									var currentDate = $filter('date')(
											new Date(), 'yyyy-MM-dd');
									var remindedDate = $filter('date')
									(
											new Date(
													notes[noteCount].reminderDate),
													'yyyy-MM-dd');
									var currentTime = $filter('date')(
											new Date(), 'h:mm a');
									if (currentDate == remindedDate
											&& currentTime == notes[noteCount].reminderTime) {
										toastr
										.sucess(
												notes[noteCount].noteTitle,
												'Reminder');
										$scope.notes[noteCount].reminder = false;
										$scope.notes[noteCount].reminderDate = null;
										$scope.notes[noteCount].reminderTime = null;
										$scope
										.updateNotes($scope.notes[noteCount]);
									}
								}
							}
						}, 30000);
			}

	/*-----------------------Add reminder To Note--------------*/

			$scope.addReminderToNote = function(note, time) {

				if (note.reminderDate == 0 && note.reminderTime == "") {
					note.reminderDate = null;
					note.reminderTime = null;
				}
				note.reminderTime = time;
				console.log("note reminder:", note.reminderTime)
				note.reminder = true;
				$scope.updateNotes(note);
			}

	/*--------------remove reminder from Note-----------------------*/

			$scope.deleteReminderOfNote = function(note) {
				note.reminderDate = null;
				note.reminderTime = null;
				note.reminder = false;
				$scope.updateNotes(note);
			}

	/*---------------change millisecond time to actual time-----------*/

			$scope.changeToDateObject = function(notes) {
				for (var noteCount = 0; noteCount < notes.length; noteCount++) {
					notes[noteCount].reminderDate = new Date(
							notes[noteCount].reminderDate);
				}
			}

/*-------------------------------------------------logout--------------------------------------------------*/

			$scope.signout = function() {

				localStorage.removeItem('acessToken');
				$location.path("/login");
			}

/*----------------------------------------uploading images--------------------------------------------------*/

			$scope.imageSrc = "";

			$scope.$on("fileProgress", function(e, progress) {
				$scope.progress = progress.loaded / progress.total;
			});

			$scope.openImageUploader = function(type) {
				$scope.type = type;
				$('#imageuploader').trigger('click');
			}

			$scope.changeProfile = function(user) {

				console.log("change profile", user)
				var a = homeService.changeProfile(user);

				a.then(function(response) {

				}, function(response) {

				});
			}

	/*----------------------- Add images----------------*/

			$scope.removeImage = function() {
				$scope.AddNoteBox = false;
				$scope.addimg = undefined;
			}

			$scope.type = {};
			$scope.type.noteImage = '';

			$scope.$watch('imageSrc', function(newimg, oldimg) {
				if ($scope.imageSrc != '') {
					if ($scope.type === 'input') {
						$scope.addimg = $scope.imageSrc;
					} else if ($scope.type === 'user') {
						$scope.User.profileUrl = $scope.imageSrc;
						$scope.changeProfile($scope.User);
					} else {
						$scope.type.noteImage = $scope.imageSrc;
						$scope.updateNotes($scope.type);
					}
				}
			});
		

			intervalFunction();

		});