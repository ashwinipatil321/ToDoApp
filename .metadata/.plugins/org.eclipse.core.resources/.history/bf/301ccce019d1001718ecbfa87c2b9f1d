package com.bridgelabz.User.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import com.bridgelabz.User.Service.UserService;
import com.bridgelabz.User.Utility.MD5Encryption;
import com.bridgelabz.User.Utility.SendMail;
import com.bridgelabz.User.Utility.Token;
import com.bridgelabz.User.Utility.Validation;
import com.bridgelabz.User.model.CustomeResponse;
import com.bridgelabz.User.model.Response;
import com.bridgelabz.User.model.User;

@RestController
public class UserController {
	@Autowired
	UserService userService;

	@Autowired
	SendMail sendMail;

	@RequestMapping(value = "/register", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Response> registrationUser(@RequestBody User user, HttpServletRequest request,
			HttpServletResponse response) {
		Response myResponse = new Response();
		String password=user.getPassword();
		String email = user.getEmail();
		boolean found = userService.createUser(user);

		User user1 = userService.getUserByEmail(email);
		System.out.println(user1.getUserID());

		String to = email;
		String msg = "click link to verfiy your account ";
		String subject = "Verfiy Mail";
		boolean valid = Validation.isvalidation(user);
		String passwordEncrypt = MD5Encryption.encrypt(password);
		user.setPassword(passwordEncrypt);
		if (!valid) {
			if (found) {
				String url = request.getRequestURL().toString();
				String token = Token.generateToken(email, user1.getUserID());
				url=url.substring(0, url.lastIndexOf('/')) + "/activate/"+ token;
				sendMail.sendMail(to, subject, msg,url);
				System.out.println(Token.verify(token));
				response.setHeader("register",token);
				myResponse.setResponseMessage("Register Sucessfully..!!!");
				return ResponseEntity.status(HttpStatus.ACCEPTED).body( myResponse);
			} else {

				myResponse.setResponseMessage("EmailId and password Aready Existe...!!!");
				return ResponseEntity.status(HttpStatus.ACCEPTED).body( myResponse);
			}
		}
		myResponse.setResponseMessage("Invalid Credantial....!!!");
		return ResponseEntity.status(HttpStatus.ACCEPTED).body( myResponse);
	}

	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public ResponseEntity<Response> loginUser(@RequestBody User user, HttpServletResponse response) {
		Response myResponse = new Response();
		String email = user.getEmail();
		boolean valid = Validation.emailValidtaion(user);
		if (valid) {
			User name = userService.loginUser(user);
			if (name != null) {
				if(name.getActivated())
				{
					String token = Token.generateToken( user.getUserID());
					System.out.println(Token.verify(token));

					response.setHeader("login",token);
					myResponse.setResponseMessage("login successful!!!");
					return ResponseEntity.status(HttpStatus.ACCEPTED).body( myResponse);

				} else {
					myResponse.setResponseMessage("user is not activated");
					return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(myResponse);
				}
			}	else
			{
				myResponse.setResponseMessage("user is not valid");
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(myResponse);
			}
		} 
		else
		{

			myResponse.setResponseMessage("Imvalid credantial");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(myResponse);
		}
	}

	@RequestMapping(value = "/activate/{jwt:.+}", method = RequestMethod.GET)
	public ResponseEntity<String> activate(@PathVariable("jwt") String jwt, HttpSession session, HttpServletRequest request) {
		System.out.println(jwt);

		int id = Token.verify(jwt);
		if (id > 0) {
			User user = userService.getUserById(id);
			if (user != null) {
				Boolean status = userService.updateActivation(id);
				if(status==true)
					return new ResponseEntity<String>("Activation done", HttpStatus.OK);
			}
		}
		return new ResponseEntity<String>("user not valid!!!", HttpStatus.CONFLICT);
	}
	@RequestMapping(value = "/forgotpassword", method = RequestMethod.POST)
	public CustomeResponse passwordRestLink(@RequestBody User user, HttpServletRequest request,
			HttpSession session,HttpServletResponse response) {
		CustomeResponse customResponse = new CustomeResponse();

		String email = user.getEmail();
		boolean valid = Validation.emailValidtaion(user);
		if (valid) {
			User userbyEmail = userService.getUserByEmail(email);
			if (userbyEmail != null) {


				String token = Token.generateToken(userbyEmail.getUserID());
				String url = request.getRequestURL().toString().replace("/forgotpassword", "")+"/resetpassword/"+token;
				response.setHeader("reset", token);			
				String to =user.getEmail();
				String msg = "Click on link to reset password  " + url+"  \n Enter below code in authentication:"+token;
				String subject = "Reset Password";		
				url=url.substring(0, url.lastIndexOf('/')) + "/activate/"+ token;
				sendMail.sendMail(to, subject, msg,url);
				customResponse.setMessage("Email sent!!!");
				customResponse.setStatus(1);
				return customResponse;
			}
			else {
				System.out.println("invalid email");
				customResponse.setMessage("Please enter valid emailID");
				customResponse.setStatus(1);
				return customResponse;
			}
		}
		customResponse.setMessage("Please enter valid emailID");
		customResponse.setStatus(1);
		return customResponse;
	}
	@RequestMapping(value = "/resetpassword/{token:.+}", method = RequestMethod.PUT)
	public CustomeResponse upatePassword(@PathVariable("token") String token,@RequestBody User user) {
		CustomeResponse customResponse = new CustomeResponse();
		String password=user.getPassword();
		System.out.println("password is "+password);
		if(token!=null){		
			int userId = Token.verify(token);
				 User oldUser=userService.getUserById(userId);
				oldUser.setPassword(password);
/*
				String passwordEncrypt = MD5Encryption.encrypt(password);
				user.setPassword(passwordEncrypt);*/
				boolean updateStatus = userService.updateUser(oldUser);
				if (updateStatus) {
					customResponse.setMessage("Reset password is success :");
					customResponse.setStatus(1);
					return customResponse;
				}
				else {
					customResponse.setMessage("Password could not be changed");
					customResponse.setStatus(-1);
					return customResponse;
				}
			}else{
				customResponse.setMessage("Error in token");
				customResponse.setStatus(1);
				return customResponse;
			}	
		}
		
	@RequestMapping(value="/isActive",method=RequestMethod.GET)
	public CustomeResponse isActivated(HttpSession session)
	{
		CustomeResponse customeResponse = new CustomeResponse();
		User user = (User) session.getAttribute(session.getId());
		if(user!=null){
			customeResponse.setMessage("User is Active:");
			customeResponse.setStatus(1);
			return customeResponse;

		}else{
			customeResponse.setMessage("User is not Active:");
			customeResponse.setStatus(-1);
			return customeResponse;			
		}
	}

	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public ResponseEntity<String> logout(HttpServletRequest request, HttpSession session) {
		session = request.getSession();
		session.removeAttribute("user");
		session.removeAttribute("token");  
		return new ResponseEntity<String>("Logout done", HttpStatus.OK);
	}
}


