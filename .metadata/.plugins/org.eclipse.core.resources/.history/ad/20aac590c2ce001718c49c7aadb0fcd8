package com.bridgelabz.User.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import com.bridgelabz.User.Service.UserService;
import com.bridgelabz.User.Utility.MD5Encryption;
import com.bridgelabz.User.Utility.SendEMail;
import com.bridgelabz.User.Utility.Token;
import com.bridgelabz.User.Utility.Validation;
import com.bridgelabz.User.model.User;



public class UserController
{
	@Autowired
	UserService userService;

	@RequestMapping(value = "/register", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE,
			MediaType.APPLICATION_XML_VALUE })
	public ResponseEntity<Void> registrationUser(@RequestBody User user, HttpServletRequest request,
			HttpSession session, HttpServletResponse response) {

		if (user.getEmail() != null && user.getUserFirstName() != null &&  user.getUserFirstName() != null && user.getMobileNumber() != null
				&& user.getPassword() != null) {

			String FirstName = user.getUserFirstName();
			String LastName=user.getUserLastName();
			String email = user.getEmail();
			String mobileNumber =user.getMobileNumber();
			String password = user.getPassword();

			String error1 = Validation.checkName(FirstName);
			String error2=Validation.checkName(LastName);
			String error3 = Validation.checkemail(email);
			String error4 = Validation.checkMobileNumber(mobileNumber);
			String error5 = Validation.checkpassword(password);

			if (error1 == "valid" && error2 == "valid" && error3 == "valid" && error4 == "valid") {
				String passwordEncrypt = MD5Encryption.encrypt(password);
				user.setPassword(passwordEncrypt);
				int id = userService.createUser(user);
				if (id > 0) {
					String url = "http://localhost:8082/TodoApp/activate/" + id;
					String to = "amnpatil8@gmail.com";
					String msg = "Click on link to activate account  " + url;
					String subject = "Subject abc";
					/*
					 * String token = Token.generateToken("Activation", email,
					 * user.getId()); response.setHeader("Activation", token);
					 */
					SendEMail.sendMail(to, subject, msg);
					System.out.println("mail send");
					return new ResponseEntity<Void>(HttpStatus.OK);
				}
				return new ResponseEntity<Void>(HttpStatus.CONFLICT);

			} else
				return new ResponseEntity<Void>(HttpStatus.CONFLICT);
		}
		return new ResponseEntity<Void>(HttpStatus.CONFLICT);
	}
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public ResponseEntity<Void> loginUser(@RequestBody User user, HttpServletRequest request,
			HttpSession session, HttpServletResponse response) {
		String email = user.getEmail();
		String password = user.getPassword();
		String error2 = Validation.checkemail(email);
		String error4 = Validation.checkpassword(password);
		if (error2 == "valid" && error4 == "valid") {
			String passwordEncrypt = MD5Encryption.encrypt(password);
			user.setPassword(passwordEncrypt);

			user = userService.loginUser(user);

			User user1=userService.getUserByEmail(email);
			System.out.println("dDSSD::"+user1);

			if(user1!=null)
			{
				System.out.println(user1.getActivated());
				if (user1.getActivated() > 0) {
					System.out.println("HERE:" + user1 + "\n ACTIVATED::" + user1.getActivated());
					//			session temperoty remove session use when token remove and invalidate done scussfully
					session = request.getSession();
					session.setAttribute(session.getId(), user);
					session.setAttribute("user", user);
					//token generate
					String token = Token.generateToken(email, user1.getUserID());
					response.setHeader("login", token);
					System.out.println(Token.verify(token));
					System.out.println("login successful!!!");
					return new ResponseEntity<Void>(HttpStatus.OK);
				}
				else{
					return new ResponseEntity<Void>(HttpStatus.BAD_REQUEST);
				}
			}
			else
				return new ResponseEntity<Void>(HttpStatus.BAD_REQUEST);	
		} else {
			System.out.println("Error in Input!!!");
			return new ResponseEntity<Void>(HttpStatus.CONFLICT);
		}
	}
}
